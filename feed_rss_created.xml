<?xml version="1.0" encoding="UTF-8" ?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/"> <channel><title>JoshooaJ</title><description>The personal blog of Josh Hendricks.</description><link>https://www.joshooaj.com/</link><atom:link href="https://www.joshooaj.com/feed_rss_created.xml" rel="self" type="application/rss+xml" /><docs>https://github.com/joshooaj/joshooaj.github.io</docs><language>en-None</language> <pubDate>Thu, 21 Mar 2024 22:53:53 -0000</pubDate> <lastBuildDate>Thu, 21 Mar 2024 22:53:53 -0000</lastBuildDate> <ttl>1440</ttl> <generator>MkDocs RSS plugin - v1.8.0</generator> <image> <url>https://www.joshooaj.com/assets/images/joshooaj.png</url> <title>JoshooaJ</title><link>https://www.joshooaj.com/</link> </image> <item> <title>Parse Code from Markdown Files</title> <author>joshooaj@gmail.com</author> <category>Markdown</category> <category>PowerShell</category> <description>&lt;h1&gt;Parse Code from Markdown Files&lt;/h1&gt;&lt;p&gt;&lt;img alt=&#34;Screenshot of Pester test output highlighting the use of aliases within markdown documentation code blocks&#34; src=&#34;/assets/images/test-md-codeblocks.hero.png&#34;&gt;&lt;/p&gt;&lt;h2&gt;Introduction&lt;/h2&gt;&lt;p&gt;Are you testing your documentation? If you write PowerShell scripts or modules, you are &lt;em&gt;hopefully&lt;/em&gt; using Pester totest your code. And if you use PlatyPS to generate markdown documentation like I do, then you have a bunch of examplePowerShell code sitting in .md files. But what happens if you rename a command, a parameter, or make a breaking change?&lt;/p&gt;</description><link>https://www.joshooaj.com/blog/2023/10/12/parse-code-from-markdown-files/</link> <pubDate>Fri, 13 Oct 2023 00:16:09 -0700</pubDate><source url="https://www.joshooaj.com/feed_rss_created.xml">JoshooaJ</source><comments>https://www.joshooaj.com/blog/2023/10/12/parse-code-from-markdown-files/#__comments</comments><guid isPermaLink="true">https://www.joshooaj.com/blog/2023/10/12/parse-code-from-markdown-files/</guid> </item> <item> <title>Generate markdown tables from PowerShell</title> <author>joshooaj@gmail.com</author> <category>PowerShell</category> <description>&lt;h1&gt;Generate markdown tables from PowerShell&lt;/h1&gt;&lt;p&gt;I had a need to generate a markdown table dynamically from PowerShell, so I wrote a flexible function which uses theproperties on the incoming objects to define the column names, supports the definition of maximum column widths, andoutputs either pretty-printed markdown with padded values and aligned columns, or &#34;compressed&#34; markdown without theunnecessary padding included.&lt;/p&gt;</description><link>https://www.joshooaj.com/blog/2023/10/02/generate-markdown-tables-from-powershell/</link> <pubDate>Mon, 02 Oct 2023 23:41:47 -0700</pubDate><source url="https://www.joshooaj.com/feed_rss_created.xml">JoshooaJ</source><comments>https://www.joshooaj.com/blog/2023/10/02/generate-markdown-tables-from-powershell/#__comments</comments><guid isPermaLink="true">https://www.joshooaj.com/blog/2023/10/02/generate-markdown-tables-from-powershell/</guid> </item> <item> <title>Debugging ConvertTo-Json</title> <author>joshooaj@gmail.com</author> <category>PowerShell</category> <description>&lt;h1&gt;Debugging ConvertTo-Json&lt;/h1&gt;&lt;p&gt;&lt;img alt=&#34;PowerShell terminal showing a duplicate key error when using ConvertTo-Json&#34; src=&#34;/assets/images/ConvertTo-Json-Error.png&#34;&gt;&lt;/p&gt;&lt;p&gt;My co-worker, Jared, who regularly uses MilestonePSTools and builds tools with it brought me an interesting problem yesterday - an apparent compatibility issue between our SDK and the &lt;code&gt;#!powershell ConvertTo-Json&lt;/code&gt; cmdlet from the built-in Microsoft.PowerShell.Utility module. If you&#39;ve ever struggled with the error &#34;ConvertTo-Json : An item with the same key has already been added.&#34;, follow along as I share our debugging process until we finally discovered the root cause. While the details in this post involve the Milestone SDK and the MilestonePSTools module, the root cause and the process of finding it is relevant to anyone using .NET assemblies or 3rd party modules with PowerShell.&lt;/p&gt;</description><link>https://www.joshooaj.com/blog/2023/09/06/debugging-convertto-json/</link> <pubDate>Wed, 06 Sep 2023 09:24:50 -0700</pubDate><source url="https://www.joshooaj.com/feed_rss_created.xml">JoshooaJ</source><comments>https://www.joshooaj.com/blog/2023/09/06/debugging-convertto-json/#__comments</comments><guid isPermaLink="true">https://www.joshooaj.com/blog/2023/09/06/debugging-convertto-json/</guid> </item> <item> <title>Your users deserve argument completers</title> <author>joshooaj@gmail.com</author> <category>PowerShell</category> <category>Usability</category> <description>&lt;h1&gt;Your users deserve argument completers&lt;/h1&gt;&lt;h2&gt;Introduction&lt;/h2&gt;&lt;p&gt;One of the things I love about PowerShell is the focus on usability anddiscoverability. The PowerShell team, and the community, have invested &lt;em&gt;so much&lt;/em&gt;into reducing friction and accelerating your workflow. Argument completers areone of the tools available to you, and you should consider adding them to yourprojects if you aren&#39;t doing so already.&lt;/p&gt;</description><link>https://www.joshooaj.com/blog/2022/12/07/your-users-deserve-argument-completers/</link> <pubDate>Wed, 06 Sep 2023 09:24:50 -0700</pubDate><source url="https://www.joshooaj.com/feed_rss_created.xml">JoshooaJ</source><comments>https://www.joshooaj.com/blog/2022/12/07/your-users-deserve-argument-completers/#__comments</comments><guid isPermaLink="true">https://www.joshooaj.com/blog/2022/12/07/your-users-deserve-argument-completers/</guid> </item> <item> <title>Argument Transformation Attributes</title> <author>joshooaj@gmail.com</author> <category>PowerShell</category> <category>Usability</category> <description>&lt;h1&gt;Argument Transformation Attributes&lt;/h1&gt;&lt;h2&gt;Introduction&lt;/h2&gt;&lt;p&gt;Argument transformation attributes make it possible to offer your userssome flexibility in how they supply values for parameters. I&#39;ve started to usethese in the &lt;a href=&#34;https://www.milestonepstools.com&#34;&gt;MilestonePSTools&lt;/a&gt; module tomake it possible to provide a name instead of a strongly typed object like a&lt;code&gt;#!powershell [RecordingServer]&lt;/code&gt; or a &lt;code&gt;#!powershell [Role]&lt;/code&gt;, while still making it clear in the&lt;code&gt;#!powershell Get-Help&lt;/code&gt; documentation what the expected object type is, and withoutpolluting functions with object transformation code.&lt;/p&gt;</description><link>https://www.joshooaj.com/blog/2022/12/21/argument-transformation-attributes/</link> <pubDate>Wed, 06 Sep 2023 09:24:50 -0700</pubDate><source url="https://www.joshooaj.com/feed_rss_created.xml">JoshooaJ</source><comments>https://www.joshooaj.com/blog/2022/12/21/argument-transformation-attributes/#__comments</comments><guid isPermaLink="true">https://www.joshooaj.com/blog/2022/12/21/argument-transformation-attributes/</guid> </item> <item> <title>Securely Reading Passwords from the Console</title> <author>joshooaj@gmail.com</author> <category>C\#</category> <description>&lt;h1&gt;Securely Reading Passwords from the Console&lt;/h1&gt;&lt;p&gt;If you&#39;ve ever written a console application which requires the user to enter sensitive information like a password or a token, you might have wrestled with concerns of exposing the password in plain text within the console window.&lt;/p&gt;</description><link>https://www.joshooaj.com/blog/2022/01/04/securely-reading-passwords-from-the-console/</link> <pubDate>Wed, 06 Sep 2023 09:24:50 -0700</pubDate><source url="https://www.joshooaj.com/feed_rss_created.xml">JoshooaJ</source><comments>https://www.joshooaj.com/blog/2022/01/04/securely-reading-passwords-from-the-console/#__comments</comments><guid isPermaLink="true">https://www.joshooaj.com/blog/2022/01/04/securely-reading-passwords-from-the-console/</guid> </item> </channel></rss>